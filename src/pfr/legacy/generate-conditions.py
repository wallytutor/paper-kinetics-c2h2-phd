#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
generate-conditions.py

@author: dalmazsi1
"""

import pandas as pd

# ****************************************************************************
# Define all wall functions.
# ****************************************************************************


pars = [(0.773e+03, 0.04132785, 0.36586941, 1.92089872, 12.41516606),
        (0.873e+03, 0.03457862, 0.39032227, 1.41582889, 9.791026790),
        (0.973e+03, 0.02537489, 0.39703098, 0.99659743, 9.775238260),
        (1.023e+03, 0.02528152, 0.40339555, 0.88494798, 10.55513796),
        (1.073e+03, 0.02507178, 0.40847247, 0.81631547, 11.98899245),
        (1.123e+03, 0.02497517, 0.40832661, 0.80065655, 11.97005813),
        (1.173e+03, 0.02492942, 0.40810172, 0.78913918, 11.91548263),
        (1.223e+03, 0.02596356, 0.40572591, 0.85168097, 11.01722351),
        (1.273e+03, 0.02682903, 0.40342913, 0.91051192, 10.36909121)
        ]

walltemp = ("({0} - 300) * (1 - exp(-(x / {1}) ** {3})) - "
            "({0} - 400) * (1 - exp(-(x / {2}) ** {4}))   ")


# ****************************************************************************
# Auxiliary method
# ****************************************************************************


def makeRow(P, Q, rad, a, H2, N2):
    global index, save
    nameI = str(index).zfill(3)
    nameP = str(int(P)).zfill(6)
    nameT = str(int(a[0])).zfill(4)
    nameQ = str(int(Q)).zfill(4)
    s = save.format(nameI, rad[0], nameP, nameT, nameQ, H2)
    w = walltemp.format(*a)
    d = dict(R=rad, W=w, P=P, T=a[0], Q=Q, N2=N2, H2=H2, save=s)
    data.loc[index] = d
    index += 1


# ****************************************************************************
# Create basic data frame.
# ****************************************************************************

for base in ['simple', 'source']:
    index = 0
    headers = ['P', 'T', 'Q', 'N2', 'H2', 'R', 'W', 'save']
    save = 'results-plug-{}'.format(base)
    save = save + '-{}-rad-{}-P-{}-T-{}-Q-{}-H2-{}'

    data = pd.DataFrame(columns=headers)

    for rad in ['True', 'False']:
        Q, N2, H2 = 222, '0.64', '0.00'
        for P in [3000, 5000, 10000]:
            for a in pars:
                makeRow(P, Q, rad, a, H2, N2)

        P, Q, N2, H2 = 10000, 378, '0.64', '0.00'
        for a in pars:
            makeRow(P, Q, rad, a, H2, N2)

        P, Q, N2, H2 = 10000, 373, '0.54', '0.10'
        for a in pars:
            makeRow(P, Q, rad, a, H2, N2)

    data.to_csv('conditions-{}.csv'.format(base), index=False)

# ****************************************************************************
# EOF
# ****************************************************************************
